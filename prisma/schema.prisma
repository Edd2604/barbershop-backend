generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id       Int      @id @default(autoincrement())
  userId   Int
  action   Action
  entity   Entity
  entityId Int
  created  DateTime @default(now())
  details  Json?
  User     User     @relation(fields: [userId], references: [id])
}

model Movement {
  id        Int          @id @default(autoincrement())
  created   DateTime     @default(now())
  type      MovementType
  productId Int
  quantity  Int
  notes     String
  Product   Product      @relation(fields: [productId], references: [id])
}

model Product {
  id             Int            @id @default(autoincrement())
  created        DateTime       @default(now())
  updated        DateTime       @updatedAt
  name           String         @db.VarChar(100)
  description    String         @db.VarChar(100)
  category       String         @db.VarChar(100)
  img            String         @default("PENDIENTE")
  stock          Int            @default(0)
  price          Decimal        @db.Decimal(10, 2)
  discount       Decimal        @db.Decimal(10, 2)
  orderLimit     Int
  isActive       Boolean        @default(false)
  isArchived     Boolean        @default(false)
  lastStockEntry DateTime?
  Movement       Movement[]
  SaleItem       SaleItem[]
  PurchaseItem   PurchaseItem[]
}

model Provider {
  id         Int        @id @default(autoincrement())
  created    DateTime   @default(now())
  updated    DateTime   @updatedAt
  ruc        String     @unique @db.VarChar(11)
  name       String     @db.VarChar(100)
  legal      String     @db.VarChar(100)
  web        String?    @db.VarChar(100)
  email      String     @db.VarChar(100)
  number     String     @db.VarChar(9)
  isActive   Boolean    @default(false)
  isArchived Boolean    @default(false)
  Purchase   Purchase[]
}

model Purchase {
  id            Int            @id @default(autoincrement())
  created       DateTime       @default(now())
  userId        Int
  providerId    Int
  totalAmount   Decimal        @db.Decimal(10, 2)
  receiptType   ReceiptType
  receiptNumber String
  receiptDate   DateTime
  User          User           @relation(fields: [userId], references: [id])
  Provider      Provider       @relation(fields: [providerId], references: [id])
  PurchaseItem  PurchaseItem[]
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  purchaseId  Int
  productId   Int
  productName String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  Product     Product  @relation(fields: [productId], references: [id])
  Purchase    Purchase @relation(fields: [purchaseId], references: [id])
}

model Sale {
  id            Int           @id @default(autoincrement())
  created       DateTime      @default(now())
  transaction   String        @default("NO HUBO TRANSACCION")
  userId        Int
  amount        Decimal       @db.Decimal(10, 2)
  discount      Decimal       @db.Decimal(10, 2)
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        Status        @default(PENDIENTE)
  User          User          @relation(fields: [userId], references: [id])
  SaleItem      SaleItem[]
}

model SaleItem {
  id          Int     @id @default(autoincrement())
  saleId      Int
  productId   Int
  productName String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  discount    Decimal @db.Decimal(10, 2)
  Product     Product @relation(fields: [productId], references: [id])
  Sale        Sale    @relation(fields: [saleId], references: [id])
}

model User {
  id          Int           @id @default(autoincrement())
  created     DateTime      @default(now())
  updated     DateTime      @updatedAt
  dni         String        @unique @db.VarChar(8)
  name        String        @db.VarChar(100)
  lastName    String        @db.VarChar(100)
  email       String        @unique @db.VarChar(100)
  number      String        @db.VarChar(9)
  password    String
  role        UserRole
  isActive    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  AuditLog    AuditLog[]
  Sale        Sale[]
  Purchase    Purchase[]
  Appointment Appointment[]
}

model Barber {
  id          Int           @id @default(autoincrement())
  name        String
  img         String?
  isActive    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  Appointment Appointment[]
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Decimal       @db.Decimal(10, 2)
  img         String?
  isActive    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  Appointment Appointment[]
}

model Appointment {
  id          Int                  @id @default(autoincrement())
  created     DateTime             @default(now())
  scheduledAt DateTime
  userId      Int
  barberId    Int
  serviceId   Int
  status      AppointmentStatus    @default(PENDIENTE)
  notes       String?              @db.Text
  User        User                 @relation(fields: [userId], references: [id])
  Barber      Barber               @relation(fields: [barberId], references: [id])
  Service     Service              @relation(fields: [serviceId], references: [id])
  Payment     AppointmentPayment[]
}

model HaircutType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(false)
  isArchived  Boolean  @default(false)
  imgs        String[]
}

model AppointmentPayment {
  id               Int           @id @default(autoincrement())
  created          DateTime      @default(now())
  appointmentId    Int           @unique
  amount           Decimal       @default(0.00) @db.Decimal(10, 2)
  additionalAmount Decimal       @default(0.00) @db.Decimal(10, 2)
  discount         Decimal       @default(0.00) @db.Decimal(10, 2)
  totalAmount      Decimal       @default(0.00) @db.Decimal(10, 2)
  method           PaymentMethod
  status           Status        @default(PENDIENTE)
  notes            String?       @db.Text
  Appointment      Appointment   @relation(fields: [appointmentId], references: [id])
}

enum UserRole {
  ADMINISTRADOR
  CLIENTE
}

enum MovementType {
  ENTRADA
  SALIDA
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

enum Entity {
  Purchase
  Provider
  User
  Product
  Movement
  Sale
  Barber
  Appointment
  Service
  AppointmentPayment
}

enum ReceiptType {
  BOLETA
  FACTURA
}

enum PaymentMethod {
  EFECTIVO
  YAPE
  PLIN
  TARJETA
}

enum Status {
  PENDIENTE
  COMPLETADO
  CANCELADO
}

enum AppointmentStatus {
  PENDIENTE
  PROCESO
  COMPLETADO
  CANCELADO
}
