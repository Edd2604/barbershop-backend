generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id       Int      @id @default(autoincrement())
  userId   Int
  action   Action
  entity   Entity
  entityId Int
  created  DateTime @default(now())
  details  Json?
  User     User     @relation(fields: [userId], references: [id])
}

model User {
  id         Int        @id @default(autoincrement())
  created    DateTime   @default(now())
  updated    DateTime   @updatedAt
  dni        String     @unique @db.VarChar(8)
  name       String     @db.VarChar(100)
  lastName   String     @db.VarChar(100)
  email      String     @unique @db.VarChar(100)
  password   String
  role       UserRole
  isActive   Boolean    @default(false)
  isArchived Boolean    @default(false)
  AuditLog   AuditLog[]
  Customer   Customer?
  Admin      Admin?
  Barber     Barber?
}

model Customer {
  id          Int           @id @default(autoincrement())
  number      String        @db.VarChar(9)
  userId      Int           @unique
  User        User          @relation(fields: [userId], references: [id])
  Appointment Appointment[]
  isArchived  Boolean       @default(false)
}

model Admin {
  id         Int       @id @default(autoincrement())
  lastLogin  DateTime?
  userId     Int       @unique
  User       User      @relation(fields: [userId], references: [id])
  isArchived Boolean   @default(false)
}

model Barber {
  id          Int           @id @default(autoincrement())
  img         String?
  skills      String        @db.Text
  userId      Int           @unique
  User        User          @relation(fields: [userId], references: [id])
  Appointment Appointment[]
  isActive    Boolean       @default(false)
  isArchived  Boolean       @default(false)
}

model Service {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Decimal         @db.Decimal(10, 2)
  img         String?
  category    ServiceCategory
  isActive    Boolean         @default(false)
  isArchived  Boolean         @default(false)
  Appointment Appointment[]
}

model Catalog {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String?          @db.Text
  category    CatalogCategory
  isActive    Boolean          @default(false)
  isArchived  Boolean          @default(false)
  imgs        String[]
}

model Appointment {
  id          Int                 @id @default(autoincrement())
  created     DateTime            @default(now())
  scheduledAt DateTime
  customerId  Int
  barberId    Int
  serviceId   Int
  status      AppointmentStatus   @default(PENDIENTE)
  notes       String?             @db.Text
  Customer    Customer            @relation(fields: [customerId], references: [id])
  Barber      Barber              @relation(fields: [barberId], references: [id])
  Service     Service             @relation(fields: [serviceId], references: [id])
  isArchived  Boolean             @default(false)
  Payment     AppointmentPayment?
}

model AppointmentPayment {
  id               Int           @id @default(autoincrement())
  created          DateTime      @default(now())
  appointmentId    Int           @unique
  serviceAmount    Decimal       @default(0.00) @db.Decimal(10, 2)
  additionalAmount Decimal       @default(0.00) @db.Decimal(10, 2)
  discount         Decimal       @default(0.00) @db.Decimal(10, 2)
  totalAmount      Decimal       @default(0.00) @db.Decimal(10, 2)
  method           PaymentMethod
  status           Status        @default(PENDIENTE)
  notes            String?       @db.Text
  Appointment      Appointment   @relation(fields: [appointmentId], references: [id])
}

enum UserRole {
  ADMINISTRADOR
  CLIENTE
  BARBERO
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

enum Entity {
  User
  Barber
  Appointment
  Service
  AppointmentPayment
}

enum PaymentMethod {
  EFECTIVO
  YAPE
  PLIN
  TARJETA
}

enum Status {
  PENDIENTE
  COMPLETADO
  CANCELADO
}

enum AppointmentStatus {
  PENDIENTE
  CONFIRMADA
  EN_PROCESO
  COMPLETADA
  CANCELADA
}

enum ServiceCategory {
  SERVICIOS_INDIVIDUALES
  PAQUETES_DE_SERVICIOS
  TINTURACIÃ“N
}

enum CatalogCategory {
  HAIRCUT
  BEARD
  DYE
}
